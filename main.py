import os
import base64
import re
import requests
import hashlib
import time
import csv
from datetime import datetime
from PIL import Image
import numpy as np
import functools
from telethon.sync import TelegramClient
import openai

print = functools.partial(print, flush=True)

# üîê Railway Secrets'tan API bilgileri alƒ±nƒ±r
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CSV_FILE = "gpt_full_log.csv"

print("‚úÖ Deƒüi≈ükenler alƒ±nƒ±yor:")
print(f"üîë API_ID: {api_id}")
print(f"üîë API_HASH: {'VAR' if api_hash else 'YOK'}")
print(f"üîë OPENAI_API_KEY: {'VAR' if openai.api_key else 'YOK'}")
print(f"üîë BOT_TOKEN: {'VAR' if BOT_TOKEN else 'YOK'}")
print(f"üîë CHAT_ID: {CHAT_ID}")


# üß† Eƒüer .session dosyasƒ± yoksa, secret'tan √ºret
if not os.path.exists("multi_session.session"):
    print("üì¶ Session dosyasƒ± yazƒ±lƒ±yor (base64)...")
    session_b64 = os.getenv("SESSION_B64")
    if session_b64:
        with open("multi_session.session", "wb") as f:
            f.write(base64.b64decode(session_b64))

# üß† Telegram istemcisi ba≈ülatƒ±lƒ±r
client = TelegramClient("multi_session", api_id, api_hash)
client.connect()
if not client.is_user_authorized():
    print("‚ùå Ge√ßerli oturum bulunamadƒ±. Railway'de telefon doƒürulamasƒ± yapƒ±lamaz.")
    exit()

channel_usernames = {
    'conflict_tr': {'lang': 'tr', 'allowed_senders': ['ConflictTR']},
    'ww3media': {'lang': 'tr', 'allowed_senders': ['3. D√ºnya Sava≈üƒ±']},
    'ateobreaking': {'lang': 'ru', 'allowed_senders': ['Ateo Breaking']}
}

BLOCKED_EMOJIS = ['üéâ', 'üéÅ', 'üéä', 'üéà', 'üéÇ', 'üéá', 'üéÜ', 'ü•≥', 'üéÄ', 'üéü']
BLOCKED_KEYWORDS = [
    'advertiser', 'sponsor', 'sponsored', 'promotion', 'telegram premium',
    'reklam', 'sponsor', 'sponsorlu', 'taksit', 'indirim', 'kampanya',
    'dem parti', 'dem partisi', '√∂zg√ºr √∂zel', 'chp', 'akp', 'ƒ±mamoƒülu', 'imamoglu',
    'conflicttr', 'ww3media', 'ateobreaking', 'dunyadantr', 'dunyadan_tr',
]

def log_gpt_interaction(stage, date, channel, text, sent, usage):
    try:
        file_exists = os.path.isfile(CSV_FILE)
        with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow([
                    "Tarih", "A≈üama", "Kanal", "√ñzet",
                    "Telegram‚Äôa G√∂nderildi mi?", "Prompt Tokens", "Completion Tokens", "Toplam Tokens"
                ])
            writer.writerow([
                date, stage, channel, text[:100],
                "Evet" if sent else "Hayƒ±r",
                getattr(usage, 'prompt_tokens', '-') if usage else '-',
                getattr(usage, 'completion_tokens', '-') if usage else '-',
                getattr(usage, 'total_tokens', '-') if usage else '-'
            ])
    except Exception as e:
        print("[LOG ERROR] CSV yazma hatasƒ±:", e)

def remove_hashtags(text):
    return re.sub(r"#\S+\s*", "", text)

def translate_if_geopolitical(text):
    prompt = (
        "You will receive a news post.\n\n"
        "1. If the content is NOT about international politics, global affairs, or geopolitical events, respond ONLY with: \"SKIP\".\n"
        "2. If it IS geopolitical, translate or rewrite the content into fluent, concise English suitable for a Twitter audience. "
        "Keep it under 280 characters. Stay neutral. Use 1‚Äì2 relevant hashtags and one emoji. Begin with a flag emoji if clearly appropriate.\n\n"
        "Return only the translated version or the word 'SKIP'."
    )
    try:
        messages = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": text}
        ]
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7,
            max_tokens=300,
        )
        output = response.choices[0].message.content.strip()
        return output, response.usage
    except Exception as e:
        print("[GPT TRANSLATE ERROR]", e)
        return "", None

def send_to_telegram(text, media_path=None, is_video=False):
    try:
        if media_path:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendVideo" if is_video else f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            with open(media_path, 'rb') as media_file:
                files = {'video' if is_video else 'photo': media_file}
                data = {"chat_id": CHAT_ID, "caption": text}
                response = requests.post(url, data=data, files=files)
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {"chat_id": CHAT_ID, "text": text}
            response = requests.post(url, data=data)

        if response.status_code == 200:
            print("‚úÖ Mesaj g√∂nderildi.")
        else:
            print("‚ùå G√∂nderim hatasƒ±:", response.text)
    except Exception as e:
        print("‚ùå Telegram API hatasƒ±:", e)

def get_sent_hashes():
    try:
        with open("sent_hashes.txt", "r") as f:
            return set(f.read().splitlines())
    except FileNotFoundError:
        return set()

def save_sent_hash(content_hash):
    with open("sent_hashes.txt", "a") as f:
        f.write(content_hash + "\n")

def is_image_red_or_black_heavy(image_path, threshold=0.7):
    try:
        image = Image.open(image_path).convert('RGB')
        image = image.resize((100, 100))
        data = np.array(image)
        total_pixels = data.shape[0] * data.shape[1]
        red_pixels = np.sum((data[:,:,0] > 150) & (data[:,:,1] < 80) & (data[:,:,2] < 80))
        black_pixels = np.sum((data[:,:,0] < 50) & (data[:,:,1] < 50) & (data[:,:,2] < 50))
        ratio = (red_pixels + black_pixels) / total_pixels
        return ratio >= threshold
    except Exception as e:
        print(f"[COLOR FILTER ERROR] {e}")
        return False

def main():
    while True:
        try:
            with TelegramClient('multi_session', api_id, api_hash) as telegram_client:
                print("[INFO] Kanallar kontrol ediliyor...\n")
                sent_hashes = get_sent_hashes()
                new_messages = 0

                for channel, info in channel_usernames.items():
                    allowed_senders = info['allowed_senders']
                    print(f"[INFO] Kanal: {channel}")

                    for message in telegram_client.iter_messages(channel, limit=4):
                        if not message.text or not message.sender:
                            continue

                        sender_name = getattr(message.sender, 'first_name', '') or getattr(message.sender, 'title', '')
                        if sender_name not in allowed_senders:
                            print(f"[SKIP] Filtreden ge√ßmedi: {sender_name}")
                            continue

                        raw_text = message.text.strip()
                        lower_text = raw_text.lower()

                        if any(keyword in lower_text for keyword in BLOCKED_KEYWORDS):
                            print("[SKIP] Yasaklƒ± i√ßerik, atlanƒ±yor.")
                            continue

                        if re.search(r"https?://\S+", raw_text) or any(e in raw_text for e in BLOCKED_EMOJIS):
                            print("[SKIP] Uygunsuz i√ßerik, atlanƒ±yor.")
                            continue

                        current_hash = hashlib.md5((channel + raw_text).encode()).hexdigest()
                        if current_hash in sent_hashes:
                            print("[DUPLICATE] Zaten g√∂nderilmi≈ü, atlanƒ±yor.")
                            continue

                        cleaned = remove_hashtags(raw_text)
                        translated, usage = translate_if_geopolitical(cleaned)
                        if translated.upper() == "SKIP":
                            print("[SKIP] GPT 'SKIP' dedi.")
                            log_gpt_interaction("Translate & Filter", datetime.now().strftime("%Y-%m-%d %H:%M"), channel, cleaned, False, usage)
                            continue

                        tweet_url = "https://twitter.com/intent/tweet?text=" + requests.utils.quote(translated)
                        final_message = f"{translated}\n\nüîó Post on Twitter: {tweet_url}"

                        media_path = None
                        is_video = False

                        if message.video:
                            try:
                                media_path = telegram_client.download_media(message.video)
                                is_video = True
                            except Exception as e:
                                print("[WARN] Video indirilemedi:", e)
                        elif message.photo:
                            try:
                                media_path = telegram_client.download_media(message.photo)
                                if is_image_red_or_black_heavy(media_path):
                                    print("[SKIP] G√∂rselde kƒ±rmƒ±zƒ±/siyah baskƒ±n. Atlanƒ±yor.")
                                    continue
                            except Exception as e:
                                print("[WARN] Fotoƒüraf indirilemedi:", e)

                        print("[SEND] G√∂nderiliyor:\n", final_message)
                        send_to_telegram(final_message, media_path, is_video=is_video)
                        save_sent_hash(current_hash)
                        log_gpt_interaction("Final", datetime.now().strftime("%Y-%m-%d %H:%M"), channel, cleaned, True, usage)

                        new_messages += 1
                        time.sleep(20)

                if new_messages == 0:
                    print("[INFO] Yeni mesaj bulunamadƒ±.")
        except Exception as e:
            print("‚ùå Genel hata:", e)

        print("[WAIT] 5 dakika bekleniyor...\n")
        time.sleep(300)

if __name__ == "__main__":
    from keep_alive import keep_alive
    keep_alive()
    main()
